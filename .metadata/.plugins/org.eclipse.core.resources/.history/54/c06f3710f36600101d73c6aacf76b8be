package com.example.demo;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.DynamicPropertyRegistry;
import org.springframework.test.context.DynamicPropertySource;
import org.testcontainers.containers.MongoDBContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;

/**
 * Integration test class for the application.
 * This class uses Testcontainers to automatically start a temporary MongoDB container
 * for testing purposes. It avoids the need for a real MongoDB instance.
 */
@SpringBootTest  // Boots up the full Spring application context for testing
@Testcontainers  // Enables support for Testcontainers (e.g., starting Docker containers automatically)
class DemoApplicationTests {

    // Define a static MongoDB container that uses the official "mongo:4.4.2" Docker image.
    // This container will start automatically before any test runs.
    @Container
    static MongoDBContainer mongodbContainer = new MongoDBContainer("mongo:4.4.2");

    /**
     * This method registers the dynamic MongoDB URI from the container.
     * Spring Boot will use this URI instead of the one in application.properties.
     * 
     * It wires the MongoDB container URI into Spring Boot at runtime.
     */
    @DynamicPropertySource
    static void setProperties(DynamicPropertyRegistry registry) {
        // Provide Spring Boot with the URI to connect to the Testcontainers MongoDB instance
        registry.add("spring.data.mongodb.uri", mongodbContainer::getReplicaSetUrl);
    }

    @Test
    void contextLoads() {
    }
}
